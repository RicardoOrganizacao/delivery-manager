{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\"; // AMBIENTES\n// import { environment } from \"src/environments/environment.prod\";\n\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/storage/storage.service\";\nexport let TaskService = /*#__PURE__*/(() => {\n  class TaskService {\n    constructor(http, storage) {\n      this.http = http;\n      this.storage = storage; //tasksURL = \"https://ruby-manager.herokuapp.com/tasks\" \n\n      this.headers = new HttpHeaders().append('Content-Type', 'application/json').append('Accept', 'application/rbk.taskmanager.v1');\n      this.tasksURL = `${environment.apiUrl}/tasks`;\n    }\n\n    getAll() {\n      return this.http.get(this.tasksURL, {\n        headers: this.headers\n      }).pipe(map(response => response.tasks), catchError(this.handleErrors));\n    }\n\n    getImportant() {\n      return this.getAll().pipe(map(tasks => tasks.slice(0, 5)), catchError(this.handleErrors));\n    }\n\n    getById(id) {\n      return this.http.get(`${this.tasksURL}/${id}`).pipe(map(response => response), catchError(this.handleErrors));\n    }\n\n    create(task) {\n      let body = task;\n      return this.http.post(this.tasksURL, body, {\n        headers: this.headers\n      }).pipe(map(response => response), catchError(this.handleErrors));\n    }\n\n    update(task) {\n      let body = task;\n      return this.http.put(`${this.tasksURL}/${task.id}`, body, {\n        headers: this.headers\n      }).pipe(map(() => task), catchError(this.handleErrors));\n    }\n\n    delete(id) {\n      return this.http.delete(`${this.tasksURL}/${id}`, {\n        headers: this.headers\n      }).pipe(map(() => null), catchError(this.handleErrors));\n    }\n\n    searchByTitle(term) {\n      return this.http.get(`${this.tasksURL}?title=${term}`, {\n        headers: this.headers\n      }).pipe(map(response => response.tasks), catchError(this.handleErrors));\n    }\n\n    handleErrors(error) {\n      //console.log(\"SALVANDO O ERRO NO ARQUIVO DE LOG - DETALHES DO ERRO => \", error)\n      return throwError(console.log(error));\n    }\n\n  }\n\n  TaskService.ɵfac = function TaskService_Factory(t) {\n    return new (t || TaskService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StorageService));\n  };\n\n  TaskService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TaskService,\n    factory: TaskService.ɵfac\n  });\n  return TaskService;\n})();","map":null,"metadata":{},"sourceType":"module"}