{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\"; // AMBIENTES\n// import { environment } from \"src/environments/environment.prod\";\n\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./storage/storage.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, storage) {\n      this.http = http;\n      this.storage = storage; //sessionsURL = \"https://ruby-manager.herokuapp.com/sessions\"\n      //usersURL = \"https://ruby-manager.herokuapp.com/users\"\n\n      this.headers = new HttpHeaders().append('Content-Type', 'application/json').append('Accept', 'application/rbk.taskmanager.v1');\n      this.sessionsURL = `${environment.apiUrl}/sessions`;\n      this.usersURL = `${environment.apiUrl}/users`;\n    }\n\n    signIn(loginForm) {\n      let body = {\n        email: loginForm.email,\n        password: loginForm.password\n      };\n      return this.http.post(this.sessionsURL, body, {\n        headers: this.headers\n      }).toPromise().then(response => {\n        this.successfulLogin(response.auth_token);\n      }).catch(response => {\n        if (response.status === 401) {\n          if (response.error.errors === 'Invalid password or email') {\n            return Promise.reject('Usuario ou senha inválidos');\n          }\n        }\n\n        return Promise.reject(response);\n      });\n    }\n\n    successfulLogin(token) {\n      let user = {\n        token: token\n      };\n      this.storage.setLocalUser(user);\n    }\n\n    signUp(userForm) {\n      const params = {\n        \"email\": userForm.email,\n        \"password\": userForm.password,\n        \"password_confirmation\": userForm.password_confirmation\n      };\n      return this.http.post(this.usersURL, {\n        user: params\n      }, {\n        headers: this.headers\n      }).pipe(map(response => response), catchError(this.handleErrors));\n    }\n\n    signOut() {\n      let tokenObj = this.storage.getLocalUser();\n      this.storage.setLocalUser(null);\n      return this.http.delete(`${this.sessionsURL}/${tokenObj.token}`, {\n        headers: this.headers\n      }).pipe(map(response => response), catchError(this.handleErrors));\n    }\n\n    userSignedIn() {\n      return this.storage.getLocalUser();\n    }\n\n    handleErrors(error) {\n      //console.log(\"SALVANDO O ERRO NO ARQUIVO DE LOG - DETALHES DO ERRO => \", error)\n      return throwError(error);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StorageService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}