{"ast":null,"code":"import { HttpErrorResponse, HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"ngx-toastr\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(router, toastService) {\n      this.router = router;\n      this.toastService = toastService;\n    }\n\n    intercept(request, next) {\n      //console.log('Passou no error interceptor')\n      return next.handle(request).pipe(catchError(err => {\n        let errorObj = err;\n\n        if (err instanceof HttpErrorResponse) {\n          //console.log('Processing http error', err.status);           \n          // if(errorObj.error) {\n          //   //errorObj = err.error\n          //   console.log('inteceptor resumo', err.error)\n          // }\n          // if(!errorObj.status) {\n          //   errorObj = JSON.parse(err.error)\n          //   console.log('inteceptor sem status code', err.error)\n          // } \n          switch (err.status) {\n            case 0:\n              this.handle0(errorObj);\n              break;\n\n            case 500:\n              this.handle500(errorObj);\n              break;\n            // case 422:\n            //   this.handle422(errorObj)\n            //   break\n            // default:\n            //   this.handleDefaultError(errorObj);\n          }\n        }\n\n        return throwError(errorObj);\n      }));\n    }\n\n    handle0(errorObj) {\n      this.toastService.error('0', errorObj.statusText);\n    }\n\n    handle500(errorObj) {\n      this.toastService.error(errorObj.status, errorObj.statusText);\n    }\n\n  }\n\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ToastrService));\n  };\n\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();\nexport const ErrorInterceptorProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: ErrorInterceptor,\n  multi: true\n};","map":null,"metadata":{},"sourceType":"module"}